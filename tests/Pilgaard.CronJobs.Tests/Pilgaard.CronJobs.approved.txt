namespace Pilgaard.CronJobs.Configuration
{
    public class CronJobOptions
    {
        public CronJobOptions() { }
        public Microsoft.Extensions.DependencyInjection.ServiceLifetime ServiceLifetime { get; set; }
        public System.TimeZoneInfo TimeZoneInfo { get; set; }
    }
}
namespace Pilgaard.CronJobs
{
    public class CronBackgroundService : Microsoft.Extensions.Hosting.BackgroundService
    {
        public CronBackgroundService(Pilgaard.CronJobs.ICronJob cronJob, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory, Microsoft.Extensions.Logging.ILogger<Pilgaard.CronJobs.CronBackgroundService> logger, Pilgaard.CronJobs.Configuration.CronJobOptions options) { }
        protected override System.Threading.Tasks.Task ExecuteAsync(System.Threading.CancellationToken stoppingToken) { }
    }
    public interface ICronJob
    {
        Cronos.CronExpression CronSchedule { get; }
        System.Threading.Tasks.Task ExecuteAsync(System.Threading.CancellationToken cancellationToken = default);
    }
}
namespace Pilgaard.CronJobs.Extensions
{
    public static class ServiceCollectionExtensions
    {
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode("Calls System.Reflection.Assembly.ExportedTypes")]
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddCronJobs(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, params System.Reflection.Assembly[] assembliesToScan) { }
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode("Calls System.Reflection.Assembly.ExportedTypes")]
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddCronJobs(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, params System.Type[] types) { }
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode("Calls System.Reflection.Assembly.ExportedTypes")]
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddCronJobs(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Pilgaard.CronJobs.Configuration.CronJobOptions>? configuration = null, params System.Reflection.Assembly[] assembliesToScan) { }
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode("Calls System.Reflection.Assembly.ExportedTypes")]
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddCronJobs(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Pilgaard.CronJobs.Configuration.CronJobOptions>? configuration = null, params System.Type[] types) { }
    }
}